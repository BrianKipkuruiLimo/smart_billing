
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL COLON DIVIDE EQ EQUALS GE GT ID LE LPAREN LT MINUS NE NOT NUMBER OR PLUS PLUSEQUAL QUESTION RPAREN TIMESstatement : ID EQUALS expressionstatement : ID PLUSEQUAL expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression AND expression\n                  | expression OR expressionexpression : expression QUESTION expression COLON expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : BOOLexpression : IDexpression : ID LPAREN expression RPAREN'
    
_lr_action_items = {'ID':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,45,],[2,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'NOT':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,45,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'LPAREN':([0,2,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,45,],[5,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,5,]),'NUMBER':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,45,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'BOOL':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,45,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,2,3,6,7,24,25,27,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,46,],[0,-21,-3,-19,-20,-17,-21,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-18,-22,-16,]),'EQUALS':([2,],[8,]),'PLUSEQUAL':([2,],[9,]),'PLUS':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,11,-19,-20,11,-21,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-18,-22,11,]),'MINUS':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,12,-19,-20,12,-21,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-18,-22,12,]),'TIMES':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,13,-19,-20,13,-21,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-18,-22,13,]),'DIVIDE':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,14,-19,-20,14,-21,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-18,-22,14,]),'GT':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,15,-19,-20,15,-21,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-18,-22,15,]),'LT':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,16,-19,-20,16,-21,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-18,-22,16,]),'GE':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,17,-19,-20,17,-21,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-18,-22,17,]),'LE':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,18,-19,-20,18,-21,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-18,-22,18,]),'EQ':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,19,-19,-20,19,-21,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-18,-22,19,]),'NE':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,20,-19,-20,20,-21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-18,-22,20,]),'AND':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,21,-19,-20,21,-21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-18,-22,21,]),'OR':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,22,-19,-20,22,-21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-18,-22,22,]),'QUESTION':([2,3,6,7,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-21,23,-19,-20,23,-21,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-18,-22,23,]),'RPAREN':([6,7,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,46,],[-19,-20,-17,-21,43,44,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-18,-22,-16,]),'COLON':([6,7,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-19,-20,-17,-21,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,45,-18,-22,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,45,],[3,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID EQUALS expression','statement',3,'p_statement_assign','parser.py',11),
  ('statement -> ID PLUSEQUAL expression','statement',3,'p_statement_add_assign','parser.py',16),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',22),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',27),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',28),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',29),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',30),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',31),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',32),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',33),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',34),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',35),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',36),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',37),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',38),
  ('expression -> expression QUESTION expression COLON expression','expression',5,'p_expression_ternary','parser.py',42),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',46),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',50),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',54),
  ('expression -> BOOL','expression',1,'p_expression_bool','parser.py',58),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',62),
  ('expression -> ID LPAREN expression RPAREN','expression',4,'p_expression_function','parser.py',66),
]
